[{"id":"ddbafaa59eade321","type":"inject","z":"7a53b6073571e8dc","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":270,"y":480,"wires":[["265f7d4beeecdbac"]]},{"id":"c08add1c6b7e48c8","type":"mysql","z":"7a53b6073571e8dc","mydb":"626607248a2dfb33","name":"","x":600,"y":480,"wires":[["19de2b4bd7224f9c"]]},{"id":"265f7d4beeecdbac","type":"function","z":"7a53b6073571e8dc","name":"","func":"flow.set('counter',flow.get(\"counter\")+1)\nif (flow.get(\"counter\")==180){\n    flow.set(\"counter\",1)\n}\nmsg.counter=flow.get(\"counter\")\nmsg.topic = \"SELECT * FROM `hydraulic_filter_dataset`  where `hydraulic_filter_dataset`.`id`  = \"+flow.get(\"counter\")+\";\"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":480,"wires":[["c08add1c6b7e48c8"]]},{"id":"079658903036917f","type":"opcua-compact-server","z":"7a53b6073571e8dc","port":"4840","endpoint":"","productUri":"","acceptExternalCommands":true,"maxAllowedSessionNumber":10,"maxConnectionsPerEndpoint":10,"maxAllowedSubscriptionNumber":100,"alternateHostname":"","name":"","showStatusActivities":false,"showErrors":false,"allowAnonymous":true,"individualCerts":false,"isAuditing":false,"serverDiscovery":true,"users":[],"xmlsetsOPCUA":[],"publicCertificateFile":"","privateCertificateFile":"","registerServerMethod":1,"discoveryServerEndpointUrl":"","capabilitiesForMDNS":"","maxNodesPerRead":1000,"maxNodesPerWrite":1000,"maxNodesPerHistoryReadData":100,"maxNodesPerBrowse":3000,"maxBrowseContinuationPoints":10,"maxHistoryContinuationPoints":10,"delayToInit":1000,"delayToClose":200,"serverShutdownTimeout":100,"addressSpaceScript":"function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n    // server = the created node-opcua server\n    // addressSpace = address space of the node-opcua server\n    // eventObjects = add event variables here to hold them in memory from this script\n  \n    // internal sandbox objects are:\n    // node = the compact server node,\n    // coreServer = core compact server object for debug and access to NodeOPCUA\n    // this.sandboxNodeContext = node context node-red\n    // this.sandboxFlowContext = flow context node-red\n    // this.sandboxGlobalContext = global context node-red\n    // this.sandboxEnv = env variables\n    // timeout and interval functions as expected from nodejs\n\n    const opcua = coreServer.choreCompact.opcua;\n    const LocalizedText = opcua.LocalizedText;\n    const namespace = addressSpace.getOwnNamespace();\n    \n    const Variant = opcua.Variant;\n    const DataType = opcua.DataType;\n    const DataValue = opcua.DataValue;\n    \n    var flexServerInternals = this;\n    \n    this.sandboxFlowContext.set(\"command_pressure\",0);\n    this.sandboxFlowContext.set(\"measured_pressure\",0);\n    this.sandboxFlowContext.set(\"command_flowrate\",0);\n    this.sandboxFlowContext.set(\"measured_flowrate\",0);\n    \n    const rootFolder = addressSpace.findNode(\"RootFolder\");\n\n    const demoHydraulics = namespace.addFolder(rootFolder.objects,{\"browseName\": \"Demo-Hydraulics\"});\n    const pressureFolder = namespace.addFolder(demoHydraulics,{\"browseName\":\"Pressure\"});\n    const flowrateFolder = namespace.addFolder(demoHydraulics,{\"browseName\":\"FlowRate\"});\n\n    const command_pressure = namespace.addVariable({\n        \"organizedBy\" : pressureFolder,\n        \"browseName\" : \"Command Pressure\",\n        \"nodeId\" : \"ns=1;s=command_pressure\",\n        \"dataType\" : \"Double\",\n        \"value\" : {\n            \"get\" : function(){\n                return new Variant ({\n                    \"dataType\" : DataType.Double,\n                    \"value\" : flexServerInternals.sandboxFlowContext.get(\"command_pressure\")\n                });\n            },\n            \"set\": function(variant){\n                flexServerInternals.sandboxFlowContext.set(\n                    \"command_pressure\",\n                    parseFloat(variant.value)\n                );\n                return opcua.StatusCodes.Good;\n            }\n        }\n    });\n\n    const measured_pressure = namespace.addVariable({\n        \"organizedBy\" : pressureFolder,\n        \"browseName\" : \"Measured Pressure\",\n        \"nodeId\" : \"ns=1;s=measured_pressure\",\n        \"dataType\" : \"Double\",\n        \"value\" : {\n            \"get\" : function(){\n                return new Variant ({\n                    \"dataType\" : DataType.Double,\n                    \"value\" : flexServerInternals.sandboxFlowContext.get(\"measured_pressure\")\n                });\n            },\n            \"set\": function(variant){\n                flexServerInternals.sandboxFlowContext.set(\n                    \"measured_pressure\",\n                    parseFloat(variant.value)\n                );\n                return opcua.StatusCodes.Good;\n            }\n        }\n    });\n\n    const command_flowrate = namespace.addVariable({\n        \"organizedBy\" : flowrateFolder,\n        \"browseName\" : \"Command Flowrate\",\n        \"nodeId\" : \"ns=1;s=command_flowrate\",\n        \"dataType\" : \"Double\",\n        \"value\" : {\n            \"get\" : function(){\n                return new Variant ({\n                    \"dataType\" : DataType.Double,\n                    \"value\" : flexServerInternals.sandboxFlowContext.get(\"command_flowrate\")\n                });\n            },\n            \"set\": function(variant){\n                flexServerInternals.sandboxFlowContext.set(\n                    \"command_flowrate\",\n                    parseFloat(variant.value)\n                );\n                return opcua.StatusCodes.Good;\n            }\n        }\n    });\n\n    const measured_flowrate = namespace.addVariable({\n        \"organizedBy\" : flowrateFolder,\n        \"browseName\" : \"Measured Flowrate\",\n        \"nodeId\" : \"ns=1;s=measured_flowrate\",\n        \"dataType\" : \"Double\",\n        \"value\" : {\n            \"get\" : function(){\n                return new Variant ({\n                    \"dataType\" : DataType.Double,\n                    \"value\" : flexServerInternals.sandboxFlowContext.get(\"measured_flowrate\")\n                });\n            },\n            \"set\": function(variant){\n                flexServerInternals.sandboxFlowContext.set(\n                    \"measured_flowrate\",\n                    parseFloat(variant.value)\n                );\n                return opcua.StatusCodes.Good;\n            }\n        }\n    });\n          \n    done();\n  }","x":480,"y":540,"wires":[]},{"id":"19de2b4bd7224f9c","type":"function","z":"7a53b6073571e8dc","name":"Set Flow Variables","func":"flow.set(\"command_pressure\",msg.payload[0].command_pressure)\nflow.set(\"measured_pressure\",msg.payload[0].measured_pressure)\nflow.set(\"command_flowrate\",msg.payload[0].command_pressure)\nflow.set(\"measured_flowrate\",msg.payload[0].measured_flowrate)\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":830,"y":480,"wires":[[]]},{"id":"0f5c82c020e2249c","type":"OpcUa-Item","z":"7a53b6073571e8dc","item":"ns=1;s=command_pressure","datatype":"Double","value":"","name":"","x":510,"y":580,"wires":[["774c888af91ed9e9"]]},{"id":"a881cc64a54bc20b","type":"inject","z":"7a53b6073571e8dc","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":320,"y":640,"wires":[["0f5c82c020e2249c","af90a28fba82f851","4e4139809aef928f","6e688924a9b1489f"]]},{"id":"774c888af91ed9e9","type":"OpcUa-Client","z":"7a53b6073571e8dc","endpoint":"823a6f11.f75ab","action":"read","deadbandtype":"a","deadbandvalue":1,"time":10,"timeUnit":"s","certificate":"n","localfile":"","localkeyfile":"","securitymode":"None","securitypolicy":"None","folderName4PKI":"","name":"","x":700,"y":640,"wires":[[]]},{"id":"af90a28fba82f851","type":"OpcUa-Item","z":"7a53b6073571e8dc","item":"ns=1;s=measured_pressure","datatype":"Double","value":"","name":"","x":510,"y":620,"wires":[["774c888af91ed9e9"]]},{"id":"4e4139809aef928f","type":"OpcUa-Item","z":"7a53b6073571e8dc","item":"ns=1;s=command_flowrate","datatype":"Double","value":"","name":"","x":510,"y":660,"wires":[["774c888af91ed9e9"]]},{"id":"6e688924a9b1489f","type":"OpcUa-Item","z":"7a53b6073571e8dc","item":"ns=1;s=measured_flowrate","datatype":"Double","value":"","name":"","x":510,"y":700,"wires":[["774c888af91ed9e9"]]},{"id":"626607248a2dfb33","type":"MySQLdatabase","name":"","host":"192.168.2.15","port":"3307","db":"brrtc_training","tz":"","charset":"UTF8"},{"id":"823a6f11.f75ab","type":"OpcUa-Endpoint","endpoint":"opc.tcp://localhost:4840/","secpol":"None","secmode":"None","none":false,"login":false,"usercert":false,"usercertificate":"","userprivatekey":""}]
